[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "camel-ai"
version = "0.1.1"
authors = ["CAMEL-AI.org"]
description = "Communicative Agents for AI Society Study"
readme = "README.md"
keywords = [
    "communicative-ai",
    "ai-societies",
    "artificial-intelligence",
    "deep-learning",
    "multi-agent-systems",
    "cooperative-ai",
    "natural-language-processing",
    "large-language-models",
]
packages = [
    { include = "camel" },
]
license = "Apache License 2.0"
homepage = "https://www.camel-ai.org/"
repository = "https://github.com/camel-ai/camel"
documentation = "https://docs.camel-ai.org"

[tool.poetry.dependencies]
python = ">=3.8.1,<3.12"
numpy = "^1"
openai = "^1.2.3"
tiktoken = "^0"
colorama = "^0"
jsonschema = "^4"
protobuf = "^4"
networkx = "^2.8.8"

# huggingface-agent
transformers = { version = "^4", optional = true }
diffusers = { version = "^0", optional = true }
accelerate = { version = "^0", optional = true }
datasets = { version = "^2", optional = true }
torch = { version = "^2", optional = true }
soundfile = { version = "^0", optional = true }
sentencepiece = { version = "^0", optional = true }
opencv-python = { version = "^4", optional = true }

# tools
beautifulsoup4 = { version = "^4", optional = true }
docx2txt = { version = "^0.8", optional = true }
PyMuPDF = { version = "^1.22.5", optional = true }
wikipedia = { version = "^1", optional = true }
pyowm = { version = "^3.3.0", optional = true }
unstructured = { version = "^0.10.30", optional = true }

# vector-databases
qdrant-client = { version = "^1.6.4", optional = true }

# test
pytest = { version = "^7", optional = true}
mock = { version = "^5", optional = true}


[tool.poetry.extras]
test = ["pytest", "mock"]

huggingface-agent = [
    "transformers",
    "diffusers",
    "accelerate",
    "datasets",
    "torch",
    "soundfile",
    "sentencepiece",
    "opencv-python",
]

tools = [
    "beautifulsoup4",
    "docx2txt",
    "PyMuPDF",
    "wikipedia",
    "pyowm",
    "unstructured",
]

vector-databases = [
    "qdrant-client",
]

all = [
    # huggingface-agent
    "transformers",
    "diffusers",
    "accelerate",
    "datasets",
    "torch",
    "soundfile",
    "sentencepiece",
    "opencv-python",
    # tools
    "beautifulsoup4",
    "docx2txt",
    "PyMuPDF",
    "wikipedia",
    "pyowm",
    "unstructured",
    # vector-database
    "qdrant-client",
]

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
yapf = "0.32.0"
isort = "5.12.0"
flake8 = "4.0.1"
mypy = "^1.5.1"
toml = ">=0.10.2"
pre-commit = "^3"
pytest = "^7"
pytest-cov = "^4"
gradio = "^3"
mock = "^5"

# types
types-Pillow = "*"
types-Pygments = "*"
types-mock = "*"
types-regex = "*"
types-setuptools = "*"
types-tqdm = "*"
types-colorama = "^0"
types-requests = "^2"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
sphinx = "^6"
sphinx_book_theme = "*"
recommonmark = "*"

[tool.yapf]
based_on_style = "pep8"
split_before_named_assigns = false

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
skip = [".gitingore", "__init__.py"]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = ["--strict-markers"]
markers = [
    "very_slow: mark a very slow test to run only in full test mode",
    "model_backend: for tests that require OpenAI API key or a local LLM",
]

[tool.coverage.report]
include_namespace_packages = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "packaging.*",
    "tiktoken",
    "openai",
    "openai.error",
    "pytest",
    "_pytest.config",
    "_pytest.nodes",
    "numpy",
    "torch",
    "sqlalchemy",
    "google.cloud.sql.connector",
    "gradio",
    "database_connection",
    "huggingface_hub",
    "huggingface_hub.utils._errors",
    "wikipedia",
    "pyowm",
    "jsonschema.*",
    "bs4.*",
    "docx2txt",
    "PyMuPDF",
    "fitz",
    "unstructured.*",
]
ignore_missing_imports = true
